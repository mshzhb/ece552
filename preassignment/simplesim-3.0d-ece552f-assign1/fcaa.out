 label_rtx emit_jump expand_label expand_goto expand_goto_internal expand_fixup fixup_gotos expand_asm expand_asm_operands expand_expr_stmt clear_last_expr expand_start_stmt_expr expand_end_stmt_expr expand_start_cond expand_end_cond expand_start_else expand_end_else expand_start_loop expand_start_loop_continue_elsewhere expand_loop_continue_here expand_end_loop expand_continue_loop expand_exit_loop expand_exit_loop_if_false expand_exit_something expand_null_return expand_null_return_1 expand_return drop_through_at_end_p tail_recursion_args expand_start_bindings use_variable use_variable_after expand_end_bindings expand_decl expand_decl_init expand_anon_union_decl expand_cleanups fixup_cleanups move_cleanups_up expand_start_case expand_start_case_dummy expand_end_case_dummy pushcase pushcase_range check_for_full_enumeration_handling expand_end_case do_jump_if_equal group_case_nodes balance_case_nodes node_has_low_bound node_has_high_bound node_is_bounded emit_jump_if_reachable emit_case_nodes get_frame_size assign_stack_local put_var_into_stack fixup_var_refs fixup_var_refs_insns fixup_var_refs_1 fixup_memory_subreg walk_fixup_memory_subreg fixup_stack_1 optimize_bit_field max_parm_reg_num get_first_nonparm_insn parm_stack_loc assign_parms get_structure_value_addr uninitialized_vars_warning setjmp_protect expand_function_start expand_function_end
time in parse: 0.000000
time in integration: 0.000000
time in jump: 0.000000
time in cse: 0.000000
time in loop: 0.000000
time in cse2: 0.000000
time in flow: 0.000000
time in combine: 0.000000
time in sched: 0.000000
time in local-alloc: 0.000000
time in global-alloc: 0.000000
time in sched2: 0.000000
time in dbranch: 0.000000
time in shorten-branch: 0.000000
time in stack-reg: 0.000000
time in final: 0.000000
time in varconst: 0.000000
time in symout: 0.000000
time in dump: 0.000000
sim-safe: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

sim: loading EIO file: /cad2/ece552f/benchmarks/gcc.eio
sim: command line: sim-safe -redir:sim fcaa.out /cad2/ece552f/benchmarks/gcc.eio 

sim: simulation started @ Thu Sep 26 21:41:48 2013, options follow:

sim-safe: This simulator implements a functional simulator.  This
functional simulator is the simplest, most user-friendly simulator in the
simplescalar tool set.  Unlike sim-fast, this functional simulator checks
for all instruction errors, and the implementation is crafted for clarity
rather than speed.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim         fcaa.out # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute

sim: ** starting functional simulation **

sim: ** simulation statistics **
sim_num_insn              279373007 # total number of instructions executed
sim_num_refs              109106589 # total number of loads and stores executed
sim_elapsed_time                 38 # total simulation time in seconds
sim_inst_rate          7351921.2368 # simulation speed (in insts/sec)
sim_num_RAW_hazard_q1      98528876 # total number of RAW hazards (q1)
sim_num_RAW_hazard_q2      89105813 # total number of RAW hazards (q2)
sim_num_WAW_hazard_q3       6634556 # total number of WAW hazards (q3)
sim_num_structural_hazard_q3    163631861 # total number of structural hazards (q3)
single_cycle_stalls_q1     17552614 # total number of single cycle stalls for q1
double_cycle_stalls_q1     80976262 # total number of double cycle stalls for q1
single_cycle_stalls_q2     69621792 # total number of single cycle stalls for q2
double_cycle_stalls_q2     19484021 # total number of double cycle stalls for q2
single_cycle_stalls_q3     33490580 # total number of single cycle stalls for q3
double_cycle_stalls_q3     11579848 # total number of double cycle stalls for q3
CPI_from_RAW_hazard_q1       1.6425 # CPI from RAW hazard (q1)
CPI_from_RAW_hazard_q2       1.3887 # CPI from RAW hazard (q2)
CPI_from_WAW_and_Structural_hazard_q3       1.2028 # CPI from WAW and structural hazards (q3)
sim_num_loads              71001838 # total number of load instructions
sim_load_ratio               0.2541 # load instruction fraction
sim_num_lduh               20126394 # total number of load use hazards
sim_load_use_ratio           0.0720 # load use fraction
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                2166768 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                 264644 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  875 # total number of pages allocated
mem.page_mem                  3500k # total size of memory pages allocated
mem.ptab_misses                 894 # total first level page table misses
mem.ptab_accesses        1341120003 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

